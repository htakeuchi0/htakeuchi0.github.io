<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2023 on htakeuchi0 のノート</title><link>https://htakeuchi0.github.io/docs/math/year2023/</link><description>Recent content in 2023 on htakeuchi0 のノート</description><generator>Hugo</generator><language>ja-jp</language><atom:link href="https://htakeuchi0.github.io/docs/math/year2023/index.xml" rel="self" type="application/rss+xml"/><item><title>2023 - 実装改良編</title><link>https://htakeuchi0.github.io/docs/math/year2023/year2023_2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://htakeuchi0.github.io/docs/math/year2023/year2023_2/</guid><description>2023 - 実装改良編 # 概要 # 前ページでは，
\[2023=(2&amp;#43;0&amp;#43;2&amp;#43;3)(2^2&amp;#43;0^2&amp;#43;2^2&amp;#43;3^2)^2\] であることに着目して，以下の問題を解いたのでした．
Problem 1. 整数 \(x=\sum_{j=0}^{n-1}a_j10^j\) \((0\le a_j\le 9,j=0,1,\dots,n-1)\) に対して， \[ \prod_{k=1}^K\sum_{j=0}^{n-1}a_j^{i_k}=x \] を満たす整数 \(K\ge1\), \(1\le i_1\le\cdots\le i_K\) が存在するかを判定せよ．存在する場合はこの方程式を満たす \((i_1,i_2,\dots,i_K)\) をひとつ求めよ． 本ページでは，そこで解説した解法を改良する方法を説明します． その後，改良前後で実行時間を比較します．ただし，結果はほとんど変わりませんでした．
実装改良 # 前ページで解説した解法は以下のとおりでした1．
Algorithm 2. \(\mathtt{Solve}(a, x, i)\) の擬似コードを以下で定める．ただし，\((a_1,\dots,a_n)\in\mathbb{N}^n,(b_1,\dots,b_m)\in\mathbb{N}^m\) に対して，\(\mathtt{append}(a,b)=(a_1,\dots,a_n,b_1,\dots,b_m)\in\mathbb{N}^{n+m}\) とする．
Input: \(a\in\mathbb{N}^n,x\in\mathbb{N},i\in\mathbb{N}\) Output: \(\prod_{k=1}^K\sum_{j=0}^{n-1}a_j^{i_k}=x,i\le i_1\le\dots\le i_K\) を満たす \((i_1,i_2,\dots,i_K)\) if \(\max(a)\le1\) then if \(i&amp;gt;1\) then return \(\emptyset\) if \(\sum_{j=0}^{n-1}a_j=x\) then return \((1)\) else return \(\emptyset\) end if for \(i&amp;rsquo;=i,i+1,\dots\) do \(y\leftarrow\sum_{j=0}^{n-1}a_j^{i&amp;rsquo;}\) if \(y&amp;gt;x\) then return \(\emptyset\) if \(y=x\) then return \((i&amp;rsquo;)\) if \(y\mid x\) then \(L\leftarrow\mathtt{Solve}(a,x/y,i&amp;rsquo;)\) if \(L=\emptyset\) then return \(\emptyset\) else return \(\mathtt{append}((i&amp;rsquo;),L)\) end if end for このアルゴリズムは，11行目によって再帰処理になっていますが， 再帰させずに，単に \(x\) を \(x/y\) に置き換えて処理を継続させることができます． この場合，再帰処理用に用意していた第3引数の \(i\) が不要になります．</description></item></channel></rss>