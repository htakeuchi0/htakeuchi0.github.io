<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>行列積の計算時間 on htakeuchi0 のノート</title><link>https://htakeuchi0.github.io/docs/cpp/mmul/</link><description>Recent content in 行列積の計算時間 on htakeuchi0 のノート</description><generator>Hugo</generator><language>ja-jp</language><atom:link href="https://htakeuchi0.github.io/docs/cpp/mmul/index.xml" rel="self" type="application/rss+xml"/><item><title>行列を表現するデータ構造と行列積の計算時間</title><link>https://htakeuchi0.github.io/docs/cpp/mmul/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://htakeuchi0.github.io/docs/cpp/mmul/basic/</guid><description>&lt;h1 id="行列を表現するデータ構造と行列積の計算時間">
 行列を表現するデータ構造と行列積の計算時間
 &lt;a class="anchor" href="#%e8%a1%8c%e5%88%97%e3%82%92%e8%a1%a8%e7%8f%be%e3%81%99%e3%82%8b%e3%83%87%e3%83%bc%e3%82%bf%e6%a7%8b%e9%80%a0%e3%81%a8%e8%a1%8c%e5%88%97%e7%a9%8d%e3%81%ae%e8%a8%88%e7%ae%97%e6%99%82%e9%96%93">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>
&lt;link rel="stylesheet" href="https://htakeuchi0.github.io/katex/katex.min.css" />
&lt;script defer src="https://htakeuchi0.github.io/katex/katex.min.js">&lt;/script>
&lt;script defer src="https://htakeuchi0.github.io/katex/auto-render.min.js" onload="renderMathInElement(document.body);">&lt;/script>&lt;span>
 \(A=(a_{ij})\)
&lt;/span>
, &lt;span>
 \(B=(b_{ij})\)
&lt;/span>
 を &lt;span>
 \(n\)
&lt;/span>
 次正方行列とします．
行列 &lt;span>
 \(A\)
&lt;/span>
, &lt;span>
 \(B\)
&lt;/span>
 の積 &lt;span>
 \(AB\)
&lt;/span>
 は
&lt;span>
 \[(AB)_{ij}=\sum_{k=0}^{n-1}a_{ik}b_{kj},\quad0\le i&amp;lt;n,\quad0\le j&amp;lt;n\]
&lt;/span>

と定義されます&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>．ただし，行列 &lt;span>
 \(M\)
&lt;/span>
 に対して，&lt;span>
 \((M)_{ij}\)
&lt;/span>
 で &lt;span>
 \(M\)
&lt;/span>
 の第 &lt;span>
 \((i,j)\)
&lt;/span>
 成分を表します．&lt;/p>
&lt;p>本ページでは，この行列積を，C++を用いていくつかの方針で実装し，実装方針による実行時間を比較します．&lt;/p>
&lt;p>実験用に使ったプログラムは以下に配置しています．&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/htakeuchi0/mmul-gcc-sample">https://github.com/htakeuchi0/mmul-gcc-sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>以下，&lt;span>
 \(n=256\)
&lt;/span>
 とし，&lt;span>
 \(A\)
&lt;/span>
, &lt;span>
 \(B\)
&lt;/span>
 の要素は倍精度浮動小数点数とします．&lt;/p>
&lt;h2 id="行列を表現するデータ構造と手順">
 行列を表現するデータ構造と手順
 &lt;a class="anchor" href="#%e8%a1%8c%e5%88%97%e3%82%92%e8%a1%a8%e7%8f%be%e3%81%99%e3%82%8b%e3%83%87%e3%83%bc%e3%82%bf%e6%a7%8b%e9%80%a0%e3%81%a8%e6%89%8b%e9%a0%86">#&lt;/a>
&lt;/h2>
&lt;p>はじめに，最も素朴な方法として，&lt;span>
 \(A\)
&lt;/span>
, &lt;span>
 \(B\)
&lt;/span>
 を2次元配列で表現することを考えます．
&lt;span>
 \(n\)
&lt;/span>
 を定数 &lt;code>kN&lt;/code> で表すとき，変数の宣言方法として，以下が考えられます．&lt;/p>
&lt;ul>
&lt;li>&lt;code>double a[kN][kN];&lt;/code>&lt;/li>
&lt;li>&lt;code>std::array&amp;lt;std::array&amp;lt;double, kN&amp;gt;, kN&amp;gt; a;&lt;/code>&lt;/li>
&lt;li>&lt;code>double **a = new double*[kN]; ... &lt;/code>&lt;/li>
&lt;li>&lt;code>std::vector&amp;lt;std::vector&amp;lt;double&amp;gt;&amp;gt; a;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>これらはいずれも，&lt;code>a[i][j]&lt;/code> が &lt;span>
 \(a_{ij}\)
&lt;/span>
 を表すため，直感的です．
これらにそれぞれ，&lt;/p></description></item><item><title>行列積の計算時間のOpenMPによる高速化</title><link>https://htakeuchi0.github.io/docs/cpp/mmul/openmp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://htakeuchi0.github.io/docs/cpp/mmul/openmp/</guid><description>&lt;h1 id="行列積の計算時間のopenmpによる高速化">
 行列積の計算時間のOpenMPによる高速化
 &lt;a class="anchor" href="#%e8%a1%8c%e5%88%97%e7%a9%8d%e3%81%ae%e8%a8%88%e7%ae%97%e6%99%82%e9%96%93%e3%81%aeopenmp%e3%81%ab%e3%82%88%e3%82%8b%e9%ab%98%e9%80%9f%e5%8c%96">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>OpenMP とは，並列計算機環境において，共有メモリ・マルチスレッド型の並列アプリケーションソフトウェア開発をサポートするために標準化されたAPIです．&lt;/p>
&lt;p>gcc コンパイラは OpenMP に対応しているため，ソースコード内に既定のキーワードを書けば，OpenMP による並列処理ができます．&lt;/p>
&lt;p>本ページでは，&lt;a href="https://htakeuchi0.github.io/docs/cpp/mmul/basic/">前ページ&lt;/a> の結果に対し，OpenMP を用いることで，行列積演算の実行時間が短縮できることを確認します．&lt;/p>
&lt;p>実験用に使ったプログラムは以下に配置しています．&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/htakeuchi0/mmul-gcc-sample">https://github.com/htakeuchi0/mmul-gcc-sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="openmp-の利用">
 OpenMP の利用
 &lt;a class="anchor" href="#openmp-%e3%81%ae%e5%88%a9%e7%94%a8">#&lt;/a>
&lt;/h2>
&lt;p>生の2次元配列で行列を表現する方式 (&lt;code>mdim_raw_array&lt;/code>) は，以下の実装としています．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> const_val&lt;span style="color:#f92672">::&lt;/span>kSize; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> const_val&lt;span style="color:#f92672">::&lt;/span>kSize; j&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> cij &lt;span style="color:#f92672">=&lt;/span> c_[i][j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> k &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; k &lt;span style="color:#f92672">&amp;lt;&lt;/span> const_val&lt;span style="color:#f92672">::&lt;/span>kSize; k&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cij &lt;span style="color:#f92672">+=&lt;/span> a_[i][k] &lt;span style="color:#f92672">*&lt;/span> b_[k][j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OpenMP を利用する場合，以下のようにします．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> k &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">double&lt;/span> cij &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#pragma omp parallel for private(j, k, cij)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> const_val&lt;span style="color:#f92672">::&lt;/span>kSize; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> const_val&lt;span style="color:#f92672">::&lt;/span>kSize; j&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cij &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (k &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; k &lt;span style="color:#f92672">&amp;lt;&lt;/span> const_val&lt;span style="color:#f92672">::&lt;/span>kSize; k&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cij &lt;span style="color:#f92672">+=&lt;/span> a_[i][k] &lt;span style="color:#f92672">*&lt;/span> b_[k][j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c_[i][j] &lt;span style="color:#f92672">=&lt;/span> cij;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OpenMP に関する補足は以下のとおりです．&lt;/p></description></item><item><title>行列積の計算時間のCPU拡張命令による高速化</title><link>https://htakeuchi0.github.io/docs/cpp/mmul/avx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://htakeuchi0.github.io/docs/cpp/mmul/avx/</guid><description>&lt;h1 id="行列積の計算時間のcpu拡張命令による高速化">
 行列積の計算時間のCPU拡張命令による高速化
 &lt;a class="anchor" href="#%e8%a1%8c%e5%88%97%e7%a9%8d%e3%81%ae%e8%a8%88%e7%ae%97%e6%99%82%e9%96%93%e3%81%aecpu%e6%8b%a1%e5%bc%b5%e5%91%bd%e4%bb%a4%e3%81%ab%e3%82%88%e3%82%8b%e9%ab%98%e9%80%9f%e5%8c%96">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://htakeuchi0.github.io/docs/cpp/mmul/openmp/">前ページ&lt;/a> では，OpenMP を用いることで，行列積演算の実行時間が短縮できることを確認しました．&lt;/p>
&lt;p>これは，直列に実行する処理を，並列に行うことで実行時間の短縮を図ったものですが，同様の効果を狙う別の方法として，SIMD (Single Instruction, Multiple Data) と呼ばれる方法があります．
これは，一つの命令を複数のデータに同時に適用することをいいます．&lt;/p>
&lt;p>この方法は，CPUの拡張命令を用いて実現できます．
Intel CPU では，Intel Intrinsics API という，CPUの命令セット拡張へのアクセスができるAPIを公開しています &lt;a href="#intel:1">[1]&lt;/a>．&lt;/p>
&lt;p>C++17 では，例えばヘッダファイル &lt;code>&amp;lt;immintrin.h&amp;gt;&lt;/code> をインクルードすることで，AVX2 という拡張機能が使え，コンパイル時に &lt;code>-march=native -mavx2&lt;/code> というフラグを追加すると，AVX2 による命令を実行するプログラムが作成できます．&lt;/p>
&lt;p>本ページでは，Intel CPU の拡張命令を用いて，SIMD により行列積演算の実行時間が短縮できることを確認します．&lt;/p>
&lt;p>実験用に使ったプログラムは以下に配置しています．&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/htakeuchi0/mmul-gcc-sample">https://github.com/htakeuchi0/mmul-gcc-sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cpu拡張命令の利用">
 CPU拡張命令の利用
 &lt;a class="anchor" href="#cpu%e6%8b%a1%e5%bc%b5%e5%91%bd%e4%bb%a4%e3%81%ae%e5%88%a9%e7%94%a8">#&lt;/a>
&lt;/h2>
&lt;p>まず，実験用PCで，AVX2の命令が実行できるかを確かめます．
Ubutu 22.04.4 LTS の場合，以下のコマンドで確認ができます．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ grep -m &lt;span style="color:#ae81ff">1&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;^flags&amp;#34;&lt;/span> /proc/cpuinfo -e avx2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flags : ...（略）... avx2 ...（略）...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>AVX2 は 256 ビットごとの演算ができます．
倍精度浮動小数点数は 64 ビットなので，1つの拡張命令を，
&lt;link rel="stylesheet" href="https://htakeuchi0.github.io/katex/katex.min.css" />
&lt;script defer src="https://htakeuchi0.github.io/katex/katex.min.js">&lt;/script>
&lt;script defer src="https://htakeuchi0.github.io/katex/auto-render.min.js" onload="renderMathInElement(document.body);">&lt;/script>&lt;span>
 \(256/64=4\)
&lt;/span>
 個のデータに同時に適用できます．&lt;/p></description></item></channel></rss>