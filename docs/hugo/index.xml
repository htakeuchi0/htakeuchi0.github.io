<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on htakeuchi0 のノート</title><link>https://htakeuchi0.github.io/docs/hugo/</link><description>Recent content in Hugo on htakeuchi0 のノート</description><generator>Hugo</generator><language>ja-jp</language><atom:link href="https://htakeuchi0.github.io/docs/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>空のサイトの生成</title><link>https://htakeuchi0.github.io/docs/hugo/base/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://htakeuchi0.github.io/docs/hugo/base/</guid><description>空のサイトの生成 # 概要 # 本ページでは，Hugo による Web サイト作成の最初のステップについて説明します． 具体的には，ローカルに空のサイトが生成できるところまで説明します．
インストール # Hugo の Quick Start に従い，Hugo をインストールします．
作者の作成環境は Linux OS 64bit (Ubuntu 18.04.6 LTS) なので，Hugo のインストールページ を参考に，以下のコマンドを実行します．
$ snap install hugo --channel=extended デスクトップ環境なので，認証のためのダイアログが表示され，パスワードを入力して認証をクリックしました．
以下のコマンドでインストールが成功したかを確認できます．
$ hugo version hugo v0.101.0-9f74196ce611cdf6d355bfb99fd8eba5c68ef7f8+extended linux/amd64 BuildDate=2022-06-28T10:02:18Z VendorInfo=snap サイトの生成 # 以下のコマンドを実行します．
$ hugo new site htakeuchi0-notebook テーマの追加 # 本サイトでは，Book テーマを利用しています． 当該テーマの README にしたがって，以下のコマンドを実行します．
$ cd htakeuchi0-notebook $ git init $ git branch -M main $ git submodule add https://github.</description></item><item><title>ページの追加とサイトの設定</title><link>https://htakeuchi0.github.io/docs/hugo/set_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://htakeuchi0.github.io/docs/hugo/set_config/</guid><description>ページの追加とサイトの設定 # 概要 # 本ページでは，Hugo による Web サイト作成における，ページの追加とサイトの設定に関する部分を説明します．
ホームページの作成 # まずは，サイト全体のホームページ（トップページ）を作成します． 以下のコマンドを実行すると，ホームページが作成されます．
$ hugo new _index.md content/_index.md が生成されているので，それを以下のように書き換えます． タイトルと適当な小見出しを作成しており，メニューからリンクを張るため，免責事項とプライバシーポリシーは，別名でアンカーを作成しています．
--- title: &amp;#34;ホームページ&amp;#34; date: 2022-08-11T12:18:39+09:00 draft: true --- # htakeuchi0 のノート ## 概要 ## 免責事項 {#disclaimer} ## プライバシーポリシー {#privacy_policy} ## 作者について ## お問い合わせ 次に，設定ファイル confing.toml を以下のようにします．
baseURL = &amp;#39;https://htakeuchi0.github.io/&amp;#39; languageCode = &amp;#39;ja-jp&amp;#39; title = &amp;#39;htakeuchi0 のノート&amp;#39; theme = &amp;#39;hugo-book&amp;#39; enableGitInfo = true [params] BookTheme = &amp;#39;auto&amp;#39; BookRepo = &amp;#39;https://github.com/htakeuchi0/htakeuchi0.github.io-sources&amp;#39; BookSearch = false [menu] [[menu.</description></item><item><title>公開用ファイルの生成</title><link>https://htakeuchi0.github.io/docs/hugo/genpages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://htakeuchi0.github.io/docs/hugo/genpages/</guid><description>公開用ファイルの生成 # 概要 # 本ページでは，Hugo で作成した markdown ファイルを公開用の html ファイルにビルドして，公開する方法について説明します．
htmlファイルの生成 # 以下のコマンドを実行すると，public ディレクトリ以下に公開用ファイル一式が生成されます．
$ hugo --minify -D ページの公開 # 本サイトは，Github Pages [1] を利用してページを公開しています． 作者は，作成用ファイルと公開ファイルを 別リポジトリで管理しています．
htakeuchi0.github.io リポジトリ：公開用 htakeuchi0.github.io-sources リポジトリ：作成用 Hugo では [2] のように，同一リポジトリで別ブランチで管理する方法が説明されています．
本サイトの管理方法の場合，htakeuchi0.github.io-sources リポジトリ側で public 以下に生成されたファイルすべてを，htakeuchi0.github.io リポジトリに配置します．
あとは，[1] のとおりに設定すれば，数分でブラウザからアクセスできるようになります．
Google Search Console の設定 # Hugo では（少なくとも Book テーマでは），サイトマップ用の sitemap.xml とRSS用の index.xml が生成されているので，それぞれを Google Search Console [3] に登録するだけです．
まとめ # 本ページでは，公開ファイルを生成して，公開する方法について説明しました．
参考文献 # [1] Github, &amp;ldquo;About GitHub Pages - GitHub Docs&amp;rdquo;, https://docs.</description></item><item><title>独自ショートコードの定義</title><link>https://htakeuchi0.github.io/docs/hugo/shortcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://htakeuchi0.github.io/docs/hugo/shortcode/</guid><description>独自ショートコードの定義 # 概要 # Hugo には，ショートコードと呼ばれるスニペットを定義・利用できる機能があります [1]．本ページでは，ショートコードの一例として，theorem-label という， \(\LaTeX\) でいう定理環境のラベル部分を生成する独自ショートコードを定義する方法について説明します．なお一般に，スニペットとは，再利用可能なソースコード断片を指す言葉です．
theorem-label ショートコード # Hugo は markdown で記事を作成できますが，markdown の簡潔に記述できる利点を損なわないよう，ショートコードと呼ばれるスニペットを定義し，利用できる機能があります．
ここでは，定理環境のラベルを生成する簡単なショートコードを作成します．ここで，定理環境とは， \(\LaTeX\) でいう定理環境のような，定理や定義を示すための文章ブロックを指すものとし，そのラベルとは &amp;ldquo;Theorem 2.3&amp;rdquo; のような文章ブロックの冒頭に書かれるラベルを指すものとします．
theorem-label ショートコードは以下の要件を満たすものとします．
&amp;ldquo;Theorem 1.&amp;rdquo; のように，定理種類名称と定理番号を太字で表示できて，ピリオドで終わること 定理種類名称はユーザが指定できること 定理番号はページごとに，定理種類名称によらず，1からはじまる連番で自動生成されること 定理番号の前に節番号などの接頭辞を任意でつけられること 定理番号の後に括弧付きコメントを任意でつけられること そこで，theorem-label ショートコードは以下のように呼び出せるものとします．
項番 呼び出し方 結果 1 {{&amp;lt; theorem-label name=&amp;quot;Theorem&amp;quot; &amp;gt;}} Theorem 1. 2 {{&amp;lt; theorem-label name=&amp;quot;Theorem&amp;quot; section=&amp;quot;5.2&amp;quot; &amp;gt;}} Theorem 5.2.2. 3 {{&amp;lt; theorem-label name=&amp;quot;Proposition&amp;quot; section=&amp;quot;3&amp;quot; comment=&amp;quot;補足&amp;quot; &amp;gt;}} Theorem 3.3 (補足). 実装例は以下のとおりです．下記ファイルを layout/shortcodes/theorem-label.html として保存します．
&amp;lt;!-- カウンタの初期化--&amp;gt; {{- if not (.</description></item><item><title>Book テーマの hint ショートコードブロック内に数式を表示する際の注意</title><link>https://htakeuchi0.github.io/docs/hugo/book_katex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://htakeuchi0.github.io/docs/hugo/book_katex/</guid><description>Book テーマの hint ショートコードブロック内に数式を表示する際の注意 # 概要 # Book テーマ [1] では， \(\KaTeX\) を使うための katex ショートコードが用意されています [2]． また，目立たせたい情報を文書ブロックとして表示できる，hint ショートコードが用意されています [3]．
しかし，hint ショートコードブロックの中で katex ショートコードを使う場合，うまく数式が表示できないことがあります． 本ページでは，hint ショートコードブロック内で数式を表示する場合の注意について説明します．
hint ショートコードの使いかた # 公式の説明 [3] をもとに，markdown での記述例と，出力結果を説明します．hint ショートコードは第1引数によって，背景色を変えることができます．
第1引数：なし # markdown の記述例は以下のとおりです．
{{&amp;lt; hint &amp;gt;}} ヒント． {{&amp;lt; /hint &amp;gt;}} 出力結果は以下のとおりです．
ヒント． 第1引数：info # markdown の記述例は以下のとおりです．
{{&amp;lt; hint info &amp;gt;}} ヒント． {{&amp;lt; /hint &amp;gt;}} 出力結果は以下のとおりです．
ヒント． 第1引数：warning # markdown の記述例は以下のとおりです．
{{&amp;lt; hint warning &amp;gt;}} ヒント． {{&amp;lt; /hint &amp;gt;}} 出力結果は以下のとおりです．</description></item></channel></rss>